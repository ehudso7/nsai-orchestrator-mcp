[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "nsai-orchestrator-mcp"
version = "1.0.0"
description = "Production-grade multi-agent orchestration platform with LLMs, memory graphs, and real-time monitoring"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "NSAI Team", email = "team@nsai.dev"}
]
keywords = ["ai", "orchestrator", "multi-agent", "llm", "production", "real-time"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.11"
dependencies = [
    "fastapi[all]>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "httpx>=0.25.2",
    "neo4j>=5.14.1",
    "redis>=5.0.1",
    "aioredis>=2.0.1",
    "python-dotenv>=1.0.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "slowapi>=0.1.9",
    "cryptography>=41.0.8",
    "bcrypt>=4.1.2",
    "prometheus-client>=0.19.0",
    "websockets>=12.0",
    "aiofiles>=23.2.1",
    "structlog>=23.2.0",
    "PyJWT>=2.8.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "psutil>=5.9.6",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "bandit>=1.7.5",
    "safety>=2.3.5",
    "pre-commit>=3.6.0",
    "locust>=2.17.0",
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.8",
    "mkdocstrings[python]>=0.24.0",
]
test = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.2",
]
docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.8",
    "mkdocstrings[python]>=0.24.0",
]

[project.urls]
"Homepage" = "https://github.com/nsai-team/orchestrator-mcp"
"Documentation" = "https://nsai-team.github.io/orchestrator-mcp"
"Repository" = "https://github.com/nsai-team/orchestrator-mcp"
"Bug Tracker" = "https://github.com/nsai-team/orchestrator-mcp/issues"

[project.scripts]
nsai-orchestrator = "main_enhanced:main"
mcp-cli = "cli.mcp_cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["*"]
exclude = ["tests*", "docs*", "frontend*"]

[tool.black]
line-length = 127
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
  | frontend
)/
'''

[tool.isort]
profile = "black"
line_length = 127
known_first_party = ["nsai_orchestrator"]
skip = ["frontend", "node_modules"]

[tool.flake8]
max-line-length = 127
extend-ignore = ["E203", "W503", "D100", "D101", "D102", "D103", "D104", "D105"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    "frontend",
    "node_modules",
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:D100,D101,D102,D103,D104",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    "frontend/",
    "node_modules/",
    "build/",
    "dist/",
]

[[tool.mypy.overrides]]
module = [
    "neo4j.*",
    "redis.*",
    "aioredis.*",
    "prometheus_client.*",
    "slowapi.*",
    "structlog.*",
    "passlib.*",
    "bcrypt.*",
    "psutil.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "security: marks tests as security tests",
    "performance: marks tests as performance tests",
]

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "frontend/*",
    "*/site-packages/*",
    "*/__pycache__/*",
    "*/migrations/*",
    "manage.py",
    "setup.py",
    "venv/*",
    ".venv/*",
    "build/*",
    "dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "frontend", "node_modules", ".venv", "venv"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*test*.py", "**/test_*.py"]

[tool.safety]
# Safety configuration for vulnerability scanning
ignore = []

[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "frontend/package.json:version"
]