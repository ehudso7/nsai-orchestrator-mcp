apiVersion: v1
kind: ServiceMonitor
metadata:
  name: backend-monitor
  namespace: production
  labels:
    app: nsai-orchestrator
    prometheus: kube-prometheus
spec:
  selector:
    matchLabels:
      app: nsai-orchestrator
      component: backend
  endpoints:
  - port: http
    interval: 30s
    path: /metrics
    scheme: http
    scrapeTimeout: 10s
---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: backend-alerts
  namespace: production
  labels:
    prometheus: kube-prometheus
    role: alert-rules
spec:
  groups:
  - name: backend.rules
    interval: 30s
    rules:
    # High error rate
    - alert: HighErrorRate
      expr: |
        sum(rate(http_requests_total{job="backend",status=~"5.."}[5m])) 
        / 
        sum(rate(http_requests_total{job="backend"}[5m])) > 0.01
      for: 5m
      labels:
        severity: critical
        team: backend
      annotations:
        summary: "High error rate detected"
        description: "Error rate is {{ $value | humanizePercentage }} for backend service"
    
    # High latency
    - alert: HighLatency
      expr: |
        histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket{job="backend"}[5m])) by (le)) > 0.5
      for: 10m
      labels:
        severity: warning
        team: backend
      annotations:
        summary: "High latency detected"
        description: "95th percentile latency is {{ $value }}s"
    
    # Pod crash looping
    - alert: PodCrashLooping
      expr: |
        rate(kube_pod_container_status_restarts_total{namespace="production",pod=~"backend-.*"}[15m]) > 0
      for: 5m
      labels:
        severity: critical
        team: backend
      annotations:
        summary: "Pod {{ $labels.pod }} is crash looping"
        description: "Pod {{ $labels.pod }} has restarted {{ $value }} times in the last 15 minutes"
    
    # High memory usage
    - alert: HighMemoryUsage
      expr: |
        sum(container_memory_working_set_bytes{namespace="production",pod=~"backend-.*"}) 
        / 
        sum(kube_pod_container_resource_limits{namespace="production",pod=~"backend-.*",resource="memory"}) > 0.9
      for: 10m
      labels:
        severity: warning
        team: backend
      annotations:
        summary: "High memory usage detected"
        description: "Memory usage is {{ $value | humanizePercentage }} of limit"
    
    # Database connection pool exhausted
    - alert: DatabaseConnectionPoolExhausted
      expr: |
        database_connection_pool_available{job="backend"} < 5
      for: 5m
      labels:
        severity: critical
        team: backend
      annotations:
        summary: "Database connection pool nearly exhausted"
        description: "Only {{ $value }} database connections available"
    
    # Redis connection issues
    - alert: RedisConnectionFailure
      expr: |
        up{job="redis"} == 0
      for: 2m
      labels:
        severity: critical
        team: backend
      annotations:
        summary: "Redis connection failure"
        description: "Cannot connect to Redis instance"
    
    # Circuit breaker open
    - alert: CircuitBreakerOpen
      expr: |
        circuit_breaker_state{job="backend",state="open"} == 1
      for: 5m
      labels:
        severity: warning
        team: backend
      annotations:
        summary: "Circuit breaker {{ $labels.name }} is open"
        description: "Circuit breaker {{ $labels.name }} has been open for 5 minutes"
    
    # Agent execution failures
    - alert: AgentExecutionFailures
      expr: |
        sum(rate(agent_execution_failures_total{job="backend"}[5m])) by (agent) > 0.1
      for: 10m
      labels:
        severity: warning
        team: backend
      annotations:
        summary: "High agent execution failure rate"
        description: "Agent {{ $labels.agent }} has failure rate of {{ $value }} per second"
    
    # SLO violations
    - alert: SLOViolation
      expr: |
        sum(rate(http_requests_total{job="backend",status=~"2.."}[5m])) 
        / 
        sum(rate(http_requests_total{job="backend"}[5m])) < 0.999
      for: 10m
      labels:
        severity: critical
        team: backend
        slo: "true"
      annotations:
        summary: "SLO violation - availability below 99.9%"
        description: "Current availability is {{ $value | humanizePercentage }}"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: production
data:
  backend-dashboard.json: |
    {
      "dashboard": {
        "title": "NSAI Orchestrator Backend",
        "panels": [
          {
            "title": "Request Rate",
            "targets": [
              {
                "expr": "sum(rate(http_requests_total{job=\"backend\"}[5m])) by (status)"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "title": "Response Time (p50, p95, p99)",
            "targets": [
              {
                "expr": "histogram_quantile(0.5, sum(rate(http_request_duration_seconds_bucket{job=\"backend\"}[5m])) by (le))"
              },
              {
                "expr": "histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket{job=\"backend\"}[5m])) by (le))"
              },
              {
                "expr": "histogram_quantile(0.99, sum(rate(http_request_duration_seconds_bucket{job=\"backend\"}[5m])) by (le))"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "title": "Agent Performance",
            "targets": [
              {
                "expr": "sum(rate(agent_execution_duration_seconds_sum[5m])) by (agent) / sum(rate(agent_execution_duration_seconds_count[5m])) by (agent)"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8}
          },
          {
            "title": "Error Rate by Endpoint",
            "targets": [
              {
                "expr": "sum(rate(http_requests_total{job=\"backend\",status=~\"5..\"}[5m])) by (handler)"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
          },
          {
            "title": "Database Connections",
            "targets": [
              {
                "expr": "database_connection_pool_active{job=\"backend\"}"
              },
              {
                "expr": "database_connection_pool_available{job=\"backend\"}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 16}
          },
          {
            "title": "Cache Hit Rate",
            "targets": [
              {
                "expr": "sum(rate(cache_hits_total[5m])) / (sum(rate(cache_hits_total[5m])) + sum(rate(cache_misses_total[5m])))"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 16}
          }
        ]
      }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: datadog-config
  namespace: production
data:
  datadog.yaml: |
    api_key: ${DD_API_KEY}
    site: datadoghq.com
    apm_enabled: true
    logs_enabled: true
    process_agent_enabled: true
    
    apm_config:
      enabled: true
      env: production
      service_name: nsai-orchestrator
      
    logs_config:
      enabled: true
      container_collect_all: true
      
    prometheus_scrape:
      enabled: true
      service_endpoints: true
      
    kubelet_tls_verify: false
    
    tags:
      - env:production
      - service:nsai-orchestrator
      - team:platform
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: datadog-agent
  namespace: production
spec:
  selector:
    matchLabels:
      app: datadog-agent
  template:
    metadata:
      labels:
        app: datadog-agent
    spec:
      serviceAccountName: datadog-agent
      containers:
      - name: datadog-agent
        image: gcr.io/datadoghq/agent:latest
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"
        volumeMounts:
        - name: config
          mountPath: /etc/datadog-agent
        - name: dockersocket
          mountPath: /var/run/docker.sock
          readOnly: true
        - name: procdir
          mountPath: /host/proc
          readOnly: true
        - name: cgroups
          mountPath: /host/sys/fs/cgroup
          readOnly: true
        env:
        - name: DD_API_KEY
          valueFrom:
            secretKeyRef:
              name: datadog-secret
              key: api-key
        - name: DD_KUBERNETES_KUBELET_HOST
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: DD_CLUSTER_NAME
          value: "production-cluster"
      volumes:
      - name: config
        configMap:
          name: datadog-config
      - name: dockersocket
        hostPath:
          path: /var/run/docker.sock
      - name: procdir
        hostPath:
          path: /proc
      - name: cgroups
        hostPath:
          path: /sys/fs/cgroup